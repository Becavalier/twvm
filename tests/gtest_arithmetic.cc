#include <memory>
#include <iostream>
#include <vector>
#include "gtest/gtest.h"
#include "tests/macros.h"
#include "lib/loader.h"
#include "lib/executor.h"
#include "lib/instantiator.h"

using std::make_unique;
using std::cout;
using std::endl;
using std::vector;

TEST(TWVM, ARITHMETIC) {
  const auto executor = make_unique<Executor>();

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result f32)
        (f32.floor (f32.const 123.9))
      ))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7d, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0xa, 0x1, 0x8, 0, 0x43, 0xcd, 0xcc, 0xf7, 0x42, 0x8e, 0xb,
      })));
  EXPECT_EQ(123, executor->inspectRunningResult<float>());

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result f64)
        (f64.floor (f64.const 255.6))
      ))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7c, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0xe, 0x1, 0xc, 0, 0x44, 0x33, 0x33, 0x33, 0x33, 0x33, 0xf3, 0x6f, 0x40,
        0x9c, 0xb,
      })));
  EXPECT_EQ(255, executor->inspectRunningResult<double>());

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result i32)
        (i32.div_u (i32.const 4000)
          (i32.div_s (i32.const -3000)
            (i32.mul (i32.const 2)
              (i32.sub (i32.const 11) 
                (i32.add (i32.const 521) (i32.const 149))
              ))))))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7f, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0x19, 0x1, 0x17, 0, 0x41, 0xa0, 0x1f, 0x41, 0xc8, 0x68, 0x41, 0x2, 0x41,
        0x0b, 0x41, 0x89, 0x4, 0x41, 0x95, 0x1, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0xb,
      })));
  EXPECT_EQ(2000, executor->inspectRunningResult<int32_t>());

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result i64)
        (i64.div_u (i64.const 4000)
          (i64.div_s (i64.const 21474836470) 
            (i64.mul (i64.const 2)
              (i64.sub (i64.const 4294967294)  
                (i64.add (i64.const 2147483647) (i64.const 100))
              ))))))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7e, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0x24, 0x1, 0x22, 0, 0x42, 0xa0, 0x1f, 0x42, 0xf6, 0xff, 0xff, 0xff, 0xcf,
        0, 0x42, 0x2, 0x42, 0xfe, 0xff, 0xff, 0xff, 0xf, 0x42, 0xff, 0xff, 0xff, 0xff, 0x7, 0x42,
        0xe4, 0, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0xb,
      })));
  EXPECT_EQ(800, executor->inspectRunningResult<int64_t>());

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result i32)
        (i32.xor (i32.const 20)
          (i32.or (i32.const 123)  
            (i32.and (i32.const 100) (i32.const 200))
          ))))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7f, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0x12, 0x1, 0x10, 0, 0x41, 0x14, 0x41, 0xfb, 0, 0x41, 0xe4, 0, 0x41,
        0xc8, 0x1, 0x71, 0x72, 0x73, 0xb,
      })));
  EXPECT_EQ(111, executor->inspectRunningResult<int32_t>());

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result i64)
        (i64.xor (i64.const 20)
          (i64.or (i64.const 123)  
            (i64.and (i64.const 4294967294) (i64.const 2147483647))
          ))))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7e, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0x18, 0x1, 0x16, 0, 0x42, 0x14, 0x42, 0xfb, 0, 0x42, 0xfe, 0xff, 0xff,
        0xff, 0xf, 0x42, 0xff, 0xff, 0xff, 0xff, 0x7, 0x83, 0x84, 0x85, 0xb,
      })));
  EXPECT_EQ(static_cast<int64_t>(2147483627), executor->inspectRunningResult<int64_t>());

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result f32)
        (f32.ceil
          (f32.sqrt
            (f32.abs (f32.const 1000.123))
          ))))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7d, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0xc, 0x1, 0xa, 0, 0x43, 0xdf, 0x7, 0x7a, 0x44, 0x8b, 0x91, 0x8d, 0xb,
      })));
  EXPECT_EQ(32, executor->inspectRunningResult<float>());

  /**
    (module
      (memory $0 1)
      (export "main" (func $main))
      (func $main (; 1 ;) (result f64)
        (f64.ceil
          (f64.sqrt
            (f64.abs (f64.const 14294967294.123))
          ))))
   */
  executor->execute(
    Instantiator::instantiate(
      Loader::init(vector<uint8_t>{
        START_BYTES, 0x1, 0x5, 0x1, 0x60, 0, 0x1, 0x7c, 0x3,
        0x2, 0x1, 0, 0x5, 0x3, 0x1, 0, 0x1, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e,
        0, 0, 0xa, 0x10, 0x1, 0x0e, 0, 0x44, 0xe7, 0xfb, 0xf0, 0x1f, 0x5f, 0xa0, 0xa, 0x42,
        0x99, 0x9f, 0x9b, 0xb,
      })));
  EXPECT_EQ(119562, executor->inspectRunningResult<double>());
}
